name: release
on:
    push:
        tags:
            - "*.*.*"
env:
    CARGO_TERM_COLOR: always
jobs:
    prepare:
        name: Prepare release
        runs-on: ubuntu-latest
        outputs:
            tag_name: ${{ github.ref_name }}
            release_name: ${{ github.ref_name }}
            changelog: ${{ steps.build_changelog.outputs.changelog }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Build changelog
              id: build_changelog
              uses: mikepenz/release-changelog-builder-action@v2
              with:
                  configuration: "./.github/changelog.json"
                  toTag: ${{ github.ref_name }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    release:
        name: ${{ matrix.job.target }} (${{ matrix.job.os }})
        runs-on: ${{ matrix.job.os }}
        needs: prepare
        strategy:
            matrix:
                job:
                    - os: ubuntu-latest
                      platform: linux
                      target: x86_64-unknown-linux-gnu
                      arch: amd64
                      svm_target_platform: linux-amd64
                    - os: ubuntu-latest
                      platform: linux
                      target: aarch64-unknown-linux-gnu
                      arch: arm64
                      svm_target_platform: linux-aarch64
                    - os: macos-latest
                      platform: darwin
                      target: x86_64-apple-darwin
                      arch: amd64
                      svm_target_platform: macosx-amd64
                    - os: macos-latest
                      platform: darwin
                      target: aarch64-apple-darwin
                      arch: arm64
                      svm_target_platform: macosx-aarch64
                    - os: windows-latest
                      platform: win32
                      target: x86_64-pc-windows-msvc
                      arch: amd64
                      svm_target_platform: windows-amd64

        steps:
            - uses: actions/checkout@v3
            - uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.job.target }}
            - uses: Swatinem/rust-cache@v2
            - name: Apple M1 setup
              if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
              run: |
                  echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
                  echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
            - name: Linux ARM setup
              if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
              run: |
                  sudo apt-get update -y
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                  echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            - name: Build binaries
              uses: actions-rs/cargo@v1
              env:
                  SVM_TARGET_PLATFORM: ${{ matrix.job.svm_target_platform }}
              with:
                  command: build
                  args: --release --bins --target ${{ matrix.job.target }}
            - name: Archive binaries
              id: artifacts
              env:
                  PLATFORM_NAME: ${{ matrix.job.platform }}
                  TARGET: ${{ matrix.job.target }}
                  ARCH: ${{ matrix.job.arch }}
                  VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
              run: |
                  if [ "$PLATFORM_NAME" == "linux" ]; then
                    tar -czvf "foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release spark probe shuttle pilot
                    echo "::set-output name=file_name::foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
                  elif [ "$PLATFORM_NAME" == "darwin" ]; then
                    # We need to use gtar here otherwise the archive is corrupt.
                    # See: https://github.com/actions/virtual-environments/issues/2619
                    gtar -czvf "foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release spark probe shuttle pilot
                    echo "::set-output name=file_name::foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
                  else
                    cd ./target/${TARGET}/release
                    7z a -tzip "foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" spark.exe probe.exe shuttle.exe pilot.exe
                    mv "foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
                    echo "::set-output name=file_name::foxar_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip"
                  fi
              shell: bash
            - name: Build man page
              id: man
              if: ${{ matrix.job.target == 'x86_64-unknown-linux-gnu' }}
              env:
                  PLATFORM_NAME: ${{ matrix.job.platform }}
                  TARGET: ${{ matrix.job.target }}
                  VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
              run: |
                  sudo apt-get -y install help2man
                  help2man -N ./target/${TARGET}/release/spark > spark.1
                  help2man -N ./target/${TARGET}/release/probe > probe.1
                  help2man -N ./target/${TARGET}/release/shuttle > shuttle.1
                  help2man -N ./target/${TARGET}/release/pilot > pilot.1
                  gzip spark.1
                  gzip probe.1
                  gzip shuttle.1
                  gzip pilot.1
                  tar -czvf "foxar_man_${VERSION_NAME}.tar.gz" spark.1.gz probe.1.gz shuttle.1.gz pilot.1.gz
                  echo "::set-output name=foxar_man::foxar_man_${VERSION_NAME}.tar.gz"
              shell: bash
            - name: Create release
              uses: softprops/action-gh-release@v1
              with:
                  name: ${{ needs.prepare.outputs.release_name }}
                  tag_name: ${{ needs.prepare.outputs.tag_name }}
                  prerelease: ${{ env.IS_NIGHTLY }}
                  body: ${{ needs.prepare.outputs.changelog }}
                  files: |
                      ${{ steps.artifacts.outputs.file_name }}
                      ${{ steps.man.outputs.foxar_man }}
            - uses: JasonEtco/create-an-issue@v2
              if: ${{ failure() }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              with:
                  update_existing: true
                  filename: .github/RELEASE_FAILURE_ISSUE_TEMPLATE.md
